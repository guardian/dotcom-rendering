#!/usr/bin/env bash

# Check whether the current node version matches the .nvmrc version, and offer some help if not.

# Check if we should skip node-check
# Required to prevent preactjs/compressed-size-action from failing when on a branch that changes node versions
if [[ "$SKIP_CHECK_NODE" == "true" ]]; then
	echo "Skipping check-node"
	exit 0
fi

in_terminal() { test -t 1; }

strip_colors() {
    local text="$1"
    echo "$text" | sed -e $'s/\x1b\[[0-9;]*m//g'
}

log_with_color() {
    local text="$1"

    # Check if output is a terminal and supports color
    if in_terminal && [[ $(tput colors) -ge 8 ]]; then
        # Terminal supports color, print the text as it is
        echo -e "$text"
    else
        # Terminal does not support color, strip color codes and print
        echo "$(strip_colors "$text")"
    fi
}

blue='\033[0;34m'
red='\033[0;31m'
dim='\033[2m'
bold='\033[1m'
reset='\033[0m'

# get the node version from .nvmrc
nvmrc_contents=$(cat .nvmrc)

# check that it's a valid version (matches x.y.z)
nvmrc_version_pattern="^[0-9]+\.[0-9]+\.[0-9]+$"
if [[ $nvmrc_contents =~ $nvmrc_version_pattern ]]; then
	nvmrc_version=${BASH_REMATCH[0]}
else
	log_with_color "${red}The Node version in .nvmrc is invalid${reset}"
	log_with_color "${dim}It should match the pattern 'x.y.z'.${reset}"
	# exit with failure
    exit 1
fi

# Now we can check if the current version of Node matches the .nvmrc version

# is _any_ node available?
if [[ -x "$(command -v node)" ]]; then
	node_version=$(node -v)
	node_version=${node_version:1} # remove the "v" in "v1.2.3"
fi

# check the version we're using
# note that `node_version` will be empty if node wan't available above
if [ "$node_version" == "$nvmrc_version" ]; then
	# we're using the correct version of node
	log_with_color "${dim}Using Node ${blue}$node_version${reset}"

	# we're done, exit with success
	exit 0
fi

# If we got here, we're using the wrong version of node, or There Is No Node.
# Try to help people load the correct version:
if in_terminal; then
	log_with_color "${red}This project requires Node v$nvmrc_version${reset}"
	if [[ -x "$(command -v fnm)" ]]; then
		log_with_color "${dim}Run ${blue}fnm use${reset}${dim} to switch to the correct version.${reset}"
		log_with_color "${dim}See ${blue}${dim}https://github.com/Schniz/fnm#shell-setup${reset}${dim} to automate this.${reset}"
	elif [[ -x "$(command -v asdf)" ]]; then
		log_with_color "${dim}Run ${blue}asdf install${reset}${dim} to switch to the correct version.${reset}"
	elif [[ -x "$(which nvm)" ]]; then
		log_with_color "${dim}Run ${blue}nvm install${reset}${dim} to switch to the correct version.${reset}"
	else
		log_with_color "${dim}Consider using ${bold}fnm${reset}${dim} to manage Node versions:${reset} ${blue}https://github.com/Schniz/fnm#installation${reset}${dim}.${reset}"
	fi
else
	# not in a terminal, so v possible we're running a husky script in a git gui
	echo "Could not find Node v$nvmrc_version."
	echo "You may need to load your Node version manager in a ~/.huskyrc file."
	echo "See https://typicode.github.io/husky/troubleshooting.html#command-not-found."
fi

# exit with failure
exit 1

