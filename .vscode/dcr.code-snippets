{
	// Place your dotcom-rendering workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"React wrapper component": {
		"prefix": "rw",
		"body": [
			"type Props = {",
			"  children: React.ReactNode;",
			"}",
			"",
			"export const $TM_FILENAME_BASE = ({ children }: Props) => ($1",
			"  <div>{children}</div>",
			");"
		],
		"description": "React wrapper component"
	},
	"stories": {
		"prefix": "stories",
		"body": [
			"import type { Meta, StoryObj } from \"@storybook/react\";",
			"import { ${TM_FILENAME_BASE/(.*)\\..+$/$1/} } from \"./${TM_FILENAME_BASE/(.*)\\..+$/$1/}\";",
			"",
			"const meta = {",
			"\ttitle: \"Components/$1\",",
			"\tcomponent: ${TM_FILENAME_BASE/(.*)\\..+$/$1/},",
			"} satisfies Meta<typeof ${TM_FILENAME_BASE/(.*)\\..+$/$1/}>;",
			"",
			"export default meta;",
			"",
			"type Story = StoryObj<typeof meta>;",
			"",
			"export const FirstStory = {",
			"\targs: {",
			"\t\t$0",
			"\t},",
			"} satisfies Story;",
			""
		],
		"description": "Stories file boilerplate"
	},
	"story": {
		"prefix": "story",
		"body": [
			"export const $1 = {",
			"\targs: {",
			"\t\t$0",
			"\t},",
			"} satisfies Story;"
		],
		"description": "Story boilerplate"
	}
}
